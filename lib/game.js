// Generated by CoffeeScript 1.9.3
var Game;

Game = (function() {
  function Game(canvas) {
    this.board = new Board();
    this.canvas = canvas;
    this.ctx = this.canvas.getContext("2d");
    this.interval = setInterval(((function(_this) {
      return function() {
        return _this.render();
      };
    })(this)), 100);
    this.incr = setInterval(((function(_this) {
      return function() {
        return _this.board.add_row();
      };
    })(this)), 1000);
    this.colors = ["red", "green", "blue", "yellow", "orange", "pink", "purple"];
  }

  Game.prototype.render = function() {
    var col, grid, h, i, j, k, l, len, len1, piece, ref, ref1, ref2, ref3, ref4, results, row, row_count, scale, w, x, y;
    scale = parseInt(Math.min(this.canvas.width, this.canvas.height) / Math.max(this.board.size.rows, this.board.size.cols));
    ref = [this.board.size.cols * scale, this.board.size.rows * scale], w = ref[0], h = ref[1];
    this.ctx.fillStyle = "#fff";
    this.ctx.fillRect(0, 0, w, h);
    for (grid = i = 0, ref1 = this.board.size.rows; 0 <= ref1 ? i <= ref1 : i >= ref1; grid = 0 <= ref1 ? ++i : --i) {
      y = grid * scale;
      this.ctx.beginPath();
      this.ctx.moveTo(0, y);
      this.ctx.lineTo(w, y);
      this.ctx.lineWidth = 1;
      this.ctx.strokeStyle = "#eee";
      this.ctx.stroke();
    }
    for (grid = j = 0, ref2 = this.board.size.cols; 0 <= ref2 ? j <= ref2 : j >= ref2; grid = 0 <= ref2 ? ++j : --j) {
      x = grid * scale;
      this.ctx.beginPath();
      this.ctx.moveTo(x, 0);
      this.ctx.lineTo(x, h);
      this.ctx.lineWidth = 1;
      this.ctx.strokeStyle = "#eee";
      this.ctx.stroke();
    }
    this.ctx.strokeStyle = "#999";
    this.ctx.lineWidth = 1;
    this.ctx.strokeRect(0, 0, w, h);
    row_count = 0;
    ref3 = this.board.rows;
    results = [];
    for (k = 0, len = ref3.length; k < len; k++) {
      row = ref3[k];
      col = 0;
      y = h - (row_count * scale) - scale;
      ref4 = row.pieces;
      for (l = 0, len1 = ref4.length; l < len1; l++) {
        piece = ref4[l];
        x = col * scale;
        if (!piece.empty) {
          this.ctx.fillStyle = this.colors[piece.value];
          this.ctx.fillRect(x, y, scale, scale);
          this.ctx.strokeRect(x, y, scale, scale);
          this.ctx.font = "48px sans-serif";
          this.ctx.fillStyle = "#fff";
          this.ctx.textAlign = "center";
          this.ctx.textBaseline = "middle";
          this.ctx.fillText(piece.value, x + (scale / 2), y + (scale / 2));
        }
        col++;
      }
      results.push(row_count++);
    }
    return results;
  };

  return Game;

})();
