// Generated by CoffeeScript 1.9.3
var Game;

Game = (function() {
  function Game(canvas) {
    this.board = new Board();
    this.board.add_row();
    this.canvas = canvas;
    this.ctx = this.canvas.getContext("2d");
    this.interval = setInterval(((function(_this) {
      return function() {
        return _this.render();
      };
    })(this)), 100);
    this.incr = setInterval(((function(_this) {
      return function() {
        return _this.board.add_row();
      };
    })(this)), 10000);
    this.resize();
    $(window).on("resize", ((function(_this) {
      return function() {
        return _this.resize();
      };
    })(this)));
    this.colors = ["red", "green", "blue", "yellow", "orange", "pink", "purple"];
  }

  Game.prototype.resize = function() {
    var ref;
    this.scale = parseInt(Math.min(this.canvas.width, this.canvas.height) / Math.max(this.board.size.rows, this.board.size.cols));
    return ref = [this.board.size.cols * this.scale, this.board.size.rows * this.scale], this.width = ref[0], this.height = ref[1], ref;
  };

  Game.prototype.clear = function() {
    this.ctx.fillStyle = "#fff";
    return this.ctx.fillRect(0, 0, this.width, this.height);
  };

  Game.prototype.draw_grid = function() {
    var grid, i, j, ref, ref1, results, x, y;
    this.ctx.strokeStyle = "#eee";
    this.ctx.lineWidth = 1;
    for (grid = i = 0, ref = this.board.size.rows; 0 <= ref ? i <= ref : i >= ref; grid = 0 <= ref ? ++i : --i) {
      y = grid * this.scale;
      this.ctx.beginPath();
      this.ctx.moveTo(0, y);
      this.ctx.lineTo(this.width, y);
      this.ctx.lineWidth = 1;
      this.ctx.strokeStyle = "#eee";
      this.ctx.stroke();
    }
    results = [];
    for (grid = j = 0, ref1 = this.board.size.cols; 0 <= ref1 ? j <= ref1 : j >= ref1; grid = 0 <= ref1 ? ++j : --j) {
      x = grid * this.scale;
      this.ctx.beginPath();
      this.ctx.moveTo(x, 0);
      this.ctx.lineTo(x, this.height);
      this.ctx.lineWidth = 1;
      this.ctx.strokeStyle = "#eee";
      results.push(this.ctx.stroke());
    }
    return results;
  };

  Game.prototype.render = function() {
    var col, i, j, len, len1, piece, ref, results, row, row_count, x, y;
    this.clear();
    this.draw_grid();
    row_count = 0;
    this.ctx.font = (this.scale * 0.66) + "px sans-serif";
    this.ctx.strokeStyle = "#eee";
    this.ctx.textAlign = "center";
    this.ctx.textBaseline = "middle";
    ref = this.board.rows;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      col = 0;
      y = this.height - (row_count * this.scale) - this.scale;
      for (j = 0, len1 = row.length; j < len1; j++) {
        piece = row[j];
        x = col * this.scale;
        if (!piece.empty) {
          this.ctx.fillStyle = this.colors[piece.value];
          this.ctx.fillRect(x, y, this.scale, this.scale);
          this.ctx.strokeRect(x, y, this.scale, this.scale);
          this.ctx.fillStyle = "#fff";
          this.ctx.fillText(piece.value, x + (this.scale / 2), y + (this.scale / 2));
        }
        col++;
      }
      results.push(row_count++);
    }
    return results;
  };

  return Game;

})();
